#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Parses the log files generated by simulation, and prints the results.

@author: Matthijs de Jong
"""

# Standard library imports
import sys
from pathlib import Path
import re
from collections import Counter

# Third party libraries
import numpy as np

# Project imports
import auxiliary.config


def main():
    # Overwrite config with command line arguments
    auxiliary.config.parse_args_overwrite_config(sys.argv[1:])

    # Load config, filepaths
    config = auxiliary.config.get_config()
    directory_path = Path(config['paths']['evaluation_log']).parent
    log_filepaths = sorted(directory_path.rglob('*'))

    # Define cross-file or constant variables
    running_success_ratio = []
    len_running_success_ratio = 5
    words = ['Current chronic:', ' completed ', 'Failure of day', 'exception', ' Action selected. ']
    microsecond_pattern = r'microsecond: (\d+)'

    # Loop over files
    for filepath in log_filepaths:

        # Skip vim swp files
        if '.swp' in filepath.name:
            continue

        # Define file-level variables
        word_counter = Counter()
        durations = []

        # Open file
        with open(filepath) as file:

            # Loop over lines
            for line in file:

                # Skip config line
                if 'Config' in line:
                    continue

                # Count words
                for word in words:
                    word_counter[word] += word in line

                # Count durations
                matches = re.findall(microsecond_pattern, line)
                if len(matches) == 1:
                    durations += [int(matches[0])]

        # Compute the success ratio
        if (word_counter[" completed "] + word_counter["Failure of day"]) != 0:
            success_ratio = word_counter[" completed "]/(word_counter[" completed "] + word_counter["Failure of day"])
        else:
            success_ratio = 0

        # Compute the running success ratio
        running_success_ratio.append(success_ratio)
        running_success_ratio = running_success_ratio[-len_running_success_ratio:]

        # Print info
        print(f'{filepath.stem}: {word_counter["Current chronic:"]} scenario(s), '
              f'running mean success ratio: {np.mean(running_success_ratio):0.4f}, ',
              f'running std success ratio: {np.std(running_success_ratio):0.4f}',
              f'{word_counter[" completed "]} day(s) completed, '
              f'{word_counter["Failure of day"]} day(s) failed, '
              f'{success_ratio:0.4f} success ratio, '
              f'{word_counter["powerflow"]} diverging powerflow exception(s), '
              f'{word_counter[" Action selected. "]} action(s) taken, '
              f'{np.mean(durations):0.3f} mean microseconds, ')


if __name__ == "__main__":
    main()
